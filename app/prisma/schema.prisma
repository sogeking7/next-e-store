generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
  image    String?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  rating      Float
  brand       String
  images      String[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.ObjectId
  // userWishlist    User[]   @relation("UserWishlist", fields: [userWishlistIDs], references: [id])
  // userWishlistIDs String[] @db.ObjectId
  userCart    User[]   @relation("UserCart", fields: [userCartIDs], references: [id])
  userCartIDs String[] @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // wishlistIDs   String[]  @db.ObjectId
  // wishlist      Product[] @relation("UserWishlist", fields: [wishlistIDs], references: [id])
  cartIDs       String[]  @db.ObjectId
  cart          Product[] @relation("UserCart", fields: [cartIDs], references: [id])
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
