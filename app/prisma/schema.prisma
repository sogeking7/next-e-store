generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
  image    String?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  quantity    Int         @default(1)
  rating      Float
  brand       String
  images      String[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlist    Wishlist[]  @relation(fields: [wishlistIDs], references: [id])
  wishlistIDs String[]    @db.ObjectId
}

model Wishlist {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String    @db.ObjectId
  items   Product[] @relation(fields: [itemIDs], references: [id])
  itemIDs String[]  @db.ObjectId
}

model Cart {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique @db.ObjectId
  cartItems   CartItem[] @relation(fields: [cartItemIDs], references: [id])
  cartItemIDs String[]   @db.ObjectId
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  product   Product  @relation(fields: [productID], references: [id])
  productID String   @db.ObjectId
  carts     Cart[]   @relation(fields: [cartIDs], references: [id])
  cartIDs   String[] @db.ObjectId
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  wishlist      Wishlist[]
  orders        Order[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.ObjectId
  orderItems OrderItem[]
  totalPrice Float
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  order     Order    @relation(fields: [orderID], references: [id])
  orderID   String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
